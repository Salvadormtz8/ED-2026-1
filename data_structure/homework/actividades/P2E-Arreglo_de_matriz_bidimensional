#include <stdio.h>
#include <stdlib.h>


int* menu(){
	int a=0, b=0, c=0;
	int *nm = malloc(2 * sizeof(int));
    if (nm == NULL) return NULL;
	
	printf("Recorrido de Matrices\n\n");
	printf("Determine los valores para la matriz (maximo 10):\n");
	
	while(a==0){
		printf("n: ");
		scanf("%i", &nm[0]);
		if(nm[0]>10 || nm[0] < 1)
			printf("El valor ingresado no es valido, por favor intente de nuevo.\n\n");
		else
			a=1;
	}
	
	while(b==0){
		printf("m: ");
		scanf("%i", &nm[1]);
		if(nm[1]>10 || nm[1] < 1)
			printf("El valor ingresado no es valido, por favor intente de nuevo.\n\n");
		else
			b=1;
	}
	
	printf("Los valores ingresados son: n=%i, m= %i.\n\n", nm[0], nm[1]);
	
	return nm;
}

int** autoF(int n, int m){
	int i=0, j=0, k=0;
	int **matriz = malloc(n * sizeof(int*));

    for (i = 0; i < n; i++) {
        matriz[i] = malloc(m * sizeof(int));
    }
    
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
        	k++;
            matriz[i][j] = k;
        }
    }
    
    return matriz;
}

int** handF(int n, int m){
	int i=0, j=0;
	int **matriz = malloc(n * sizeof(int*));

    for (i = 0; i < n; i++) {
        matriz[i] = malloc(m * sizeof(int));
    }
    
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
        	printf("Valor [%i][%i]: ", i+1, j+1);
            scanf("%i", &matriz[i][j]);
        }
    }
    
    return matriz;
}

int** menuFill(int n, int m){
	int a=0, i;
	int **matriz;
	
	printf("Como desea rellenar la matriz?\n\n");
	printf("1. Automatico (Recomendado)\n2. A mano\n\n");
	while(a==0){
		scanf("%i", &i);
		switch(i){
			case 1:
				matriz = autoF(n, m);
				a=1;
				break;
			case 2:
				matriz = handF(n, m);
				a=1;
				break;
			default:
				printf("La opcion ingresada no es valida, por favor intente de nuevo.\n\n");
				break;
		}
		
	}
	
}

void printm(int **matriz, int n, int m){
	int i, j;
	printf("\nLa matriz resultante es:\n");
	for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("[%2d] ", matriz[i][j]);
        }
        printf("\n");
    }
    printf("\n");
    return;
}

void rH(int **matriz, int n, int m){
	int i, j;
	printf("\nRecorrido Horizontal:\n\n");
	for(i=0; i<n; i++){
		for(j=0; j<m; j++){
			printf("[%2d] ", matriz[i][j]);
		}
	}
	
	return;
}

void rVI(int **matriz, int n, int m){
	int i, j;
	printf("\nRecorrido Vertical Inverso:\n\n");
	for(i=m-1; i>=0; i--){
		for(j=n-1; j>=0; j--){
			printf("[%2d] ", matriz[j][i]);
		}
	}
	
	return;
}

void rD(int **matriz, int n, int m){
	int i, j;
	printf("\nRecorrido Diagonal:\n\n");
	if(n>m){
		j=m;
	}
	else if(n<=m){
		j=n;
	}
	for(i=0; i<j; i++){
		printf("[%2d] ", matriz[i][i]);
	}
	
	return;
}

void menuRecorrido(int **matriz, int n, int m){
	int a=0, i;
	printf("Que recorrido quiere realizar en la matriz?\n\n");
	printf("1. Horizontal\n2. Vertical Inverso\n3. Diagonal\n4. Realizar todos\n\n");
	while(a==0){
		scanf("%i", &i);
		switch(i){
			case 1:
				rH(matriz, n, m);
				a=1;
				break;
			case 2:
				rVI(matriz, n, m);
				a=1;
				break;
			case 3:
				rD(matriz, n, m);
				a=1;
				break;
			case 4:
				rH(matriz, n, m);
				rVI(matriz, n, m);
				rD(matriz, n, m);
				a=1;
				break;
			default:
				printf("La opcion ingresada no es valida, por favor intente de nuevo.\n\n");
				break;
		}
		
	}
	return;
}

int main(){
	int i=0, j=0;
	int *nm = menu();
	int **matriz = menuFill(nm[0], nm[1]);
	
	printm(matriz, nm[0], nm[1]);
	
	menuRecorrido(matriz, nm[0], nm[1]);
	
	for (i = 0; i < nm[0]; i++) {
        free(matriz[i]);
    }
	free(matriz);
	free(nm);
	return 0;
}
